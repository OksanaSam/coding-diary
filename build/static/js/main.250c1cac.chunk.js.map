{"version":3,"sources":["components/Entry.jsx","components/firebaseConfig.jsx","components/EmailPasswordForm.jsx","components/SignInModal.jsx","Authentication.jsx","components/Card.jsx","components/Cards.jsx","components/ColorPicker.jsx","App.js","use-debounce.jsx","serviceWorker.js","index.js"],"names":["options","name","value","NewEntry","props","useState","isChecked","setChecked","selectedOption","setSelectedOption","inputValue","setInputValue","items","setItems","useEffect","isGlobalChecked","handleDelete","index","newItems","splice","id","onChange","e","target","map","option","key","selected","disabled","className","item","currentDate","format","type","checked","onClick","styles","backgroundColor","handleDateChange","onSelect","handleDateSelect","onSubmit","preventDefault","push","text","done","Swal","fire","title","confirmButtonText","handleClick","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","apps","length","initializeApp","initializeFirebase","SubmitButton","EmailPasswordForm","email","setEmail","password","setPassword","required","placeholder","SignInModal","isOpen","modalIsOpen","ariaHideApp","onAfterOpen","onRequestClose","closeModal","contentLabel","googleSignin","console","log","handleGitHubLogin","handleTwitterLogin","signInWithEmailAndPassword","createUserWithEmailAndPassword","auth","GoogleAuthProvider","onAuthStateChanged","user","Authentication","setUser","setIsOpen","sendSignInLinkToEmail","url","handleCodeInApp","dynamicLinkDomain","then","window","localStorage","setItem","catch","error","isSignInWithEmailLink","location","href","getItem","prompt","signInWithEmailLink","result","removeItem","displayName","signOut","provider","signInWithPopup","token","credential","accessToken","newUser","code","message","GithubAuthProvider","TwitterAuthProvider","secret","CardNew","StylesProvider","injectFirst","Card","Cards","uniqueId","ColorPicker","state","displayColorPicker","color","r","g","b","a","setState","handleClose","handleChange","rgb","reactCSS","width","height","borderRadius","background","this","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","cover","top","right","bottom","left","style","Component","firebaseAppAuth","withFirebaseAuth","Date","setDate","globalCheckbox","setGlobalCheckbox","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","CheckboxContext","React","createContext","useContext","ref","on","snapshot","data","val","entryList","addEntry","entry","dbRef","htmlFor","defaultChecked","date","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.250c1cac.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport firebase from 'firebase/app';\nimport styled, { css } from 'styled-components';\nimport Swal from \"sweetalert2\";\nimport DatePicker from 'react-datepicker';\nimport { format, compareAsc } from 'date-fns';\n\n\n\nconst options = [\n    { name: 'Select…', value: '' },\n    { name: 'JavaScript', value: 'JavaScript' },\n    { name: 'React', value: 'React' },\n    { name: 'Vanilla', value: 'Vanilla' },\n    { name: 'Other', value: 'Other' }\n];\n\n\nconst NewEntry = (props) => {\n    const [isChecked, setChecked] = useState(false);\n    const [textArea, setTextArea] = useState('');\n    const [selectedOption, setSelectedOption] = useState(options[0].value);\n    const [inputValue, setInputValue] = useState('');\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        setChecked(props.isGlobalChecked); \n    }, [props.isGlobalChecked]);\n\n    const handleChecked = () => {\n        setChecked(!isChecked);\n    };\n\n    const handleTextAreaChange = (e) => {\n        setTextArea(e.target.value);\n        console.log(textArea)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!inputValue) {\n            Swal.fire({\n                title: 'Hm...',\n                text: 'Please enter your text',\n                confirmButtonText: 'Ok',\n            });\n        } else {\n            const newItems = [...items];\n            newItems.push({ text: inputValue, done: false });\n            setItems(newItems);\n            setInputValue('');\n        }\n    }\n\n    \n    const handleCardSubmit = (e) => {\n        e.preventDefault();\n        if (!textArea && !inputValue) {\n            Swal.fire({\n                title: 'Hm...',\n                text: 'Please add at least one entry',\n                confirmButtonText: 'Ok',\n            });\n        } else {\n            props.addEntry(textArea);\n        }\n    }\n\n\n    // const handleDelete = (index) => {\n    //     if (!props.user) {\n    //         Swal.fire({\n    //           title: 'Oops...',\n    //           text: 'Please sign in',\n    //           confirmButtonText: 'Ok',\n    //         })\n    //     } else {\n    //         const dbRef = firebase.database().ref(`users/${props.user.displayName}`);\n    //         dbRef.child(index).remove();\n    //     }\n    // };\n\n    const handleClick = (index) => {\n        const newItems = [...items];\n        newItems[index].done = !newItems[index].done;\n        setItems(newItems);\n    };\n\n    const handleDelete = (index) => {\n        const newItems = [...items];\n        newItems.splice(index, 1);\n        setItems(newItems);\n    };\n\n    return (\n        <>\n            <select\n                name='tool'\n                id='tool'\n                value={selectedOption}\n                onChange={e => setSelectedOption(e.target.value)}>\n                {options.map(option => (\n                    <option\n                    key={option.value}\n                    selected={option.value === null ? 'selected' : null}\n                    value={option.value}\n                    disabled={option.value === null ? true : null} \n                    >\n                        {option.name}\n                    </option>\n            ))}\n            </select>\n                <p className=\"selectedTool\">{selectedOption}</p>\n            <p>{props.item}</p>\n            {/* <p>{props.currentDate ? `${props.currentDate.getMonth()} ${props.currentDate.getDate()} ${props.currentDate.getFullYear()}` : null}</p> */}\n            <p>{props.currentDate ? format(props.currentDate, \"do MMMM yyyy\") : null}</p>\n            <input\n                type='checkbox'\n                onChange={() => handleChecked(props.item)}\n                checked={isChecked}\n            />\n             <button onClick={() => handleDelete(props.item)}>delete</button>\n             <DatePicker\n                styles={ {backgroundColor: 'blue'} }\n                selected={props.currentDate}\n                onChange={props.handleDateChange}\n                onSelect={props.handleDateSelect}\n            />\n\n        <form onSubmit={handleSubmit}>\n          <label>\n            <input\n              type=\"text\"\n              value={inputValue}\n              onChange={(e) => setInputValue(e.target.value)}\n            />\n          </label>\n          <button>Add</button>\n        </form>\n\n        <ul>\n          {items.map((item, id) => (\n            <li key={id}>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  checked={item.done}\n                  onClick={() => handleClick(id)}\n                />\n                <span className={item.done ? \"done\" : null}>{item.text}</span>\n                <button onClick={() => handleDelete(id)}>X</button>\n              </label>\n              </li>\n          ))}\n        </ul>\n        </>   \n    );\n};\n\nexport default NewEntry;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAUgQEbOBcqZdf_L0Sgm9DQyINiHuEqIVE\",\n    authDomain: \"coding-diary-d8ded.firebaseapp.com\",\n    databaseURL: \"https://coding-diary-d8ded.firebaseio.com\",\n    projectId: \"coding-diary-d8ded\",\n    storageBucket: \"coding-diary-d8ded.appspot.com\",\n    messagingSenderId: \"309101571735\",\n    appId: \"1:309101571735:web:1d74e9b8c9dd4e4e4f43d2\"\n  };\n\n  function initializeFirebase() {\n    // Prevent reinitializing the app in snack.\n    if (!firebase.apps.length) {\n      return firebase.initializeApp(firebaseConfig);\n    }\n  }\n  initializeFirebase();\n// firebase.initializeApp(firebaseConfig);\n\nexport default firebaseConfig;\n","import React, { useState } from 'react';\n\nconst SubmitButton = props =>\n<button {...props}>submit</button>;\n\nconst EmailPasswordForm = ( {onSubmit} ) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    <>\n    <input\n      type=\"email\"\n      value={email}\n      required\n      onChange={(e) => setEmail(e.target.value)}\n\n    />\n    <input\n      type=\"password\"\n      value={password}\n      required\n      placeholder='enter password'\n      onChange={(e) => setPassword(e.target.value)}\n    />\n      \n      <SubmitButton onClick={() => onSubmit(email, password)} />\n    </>\n  );\n}\n\nexport default EmailPasswordForm;","import React from 'react';\nimport Modal from 'react-modal';\nimport EmailPasswordForm from './EmailPasswordForm';\nimport { FaTwitterSquare, FaGithub, FaGoogle, FaFacebookSquare } from 'react-icons/fa';\nimport styled, { css } from 'styled-components'\n\n\n\n// const Button = styled.button`\n//   background: transparent;\n//   border-radius: 3px;\n//   border: 2px solid blue;\n//   color: darkblue;\n//   margin: 0 1em;\n//   padding: 0.25em 1em;\n\n//   ${props =>\n//     props.primary &&\n//     css`\n//       background: blue;\n//       color: white;\n//     `};\n// `\n\n\n\n\nconst SignInModal = (props) => {\n    \n    function afterOpenModal() {\n    // console.log('modal is open');\n    }\n\n    return (\n        <>\n        <Modal\n            isOpen={props.modalIsOpen}\n            ariaHideApp={false}\n            onAfterOpen={afterOpenModal}\n            onRequestClose={props.closeModal}\n            contentLabel=\"Example Modal\"\n        >\n        <button onClick={props.closeModal}>close</button>\n        <button onClick={props.googleSignin}><FaGoogle/></button>\n        <button onClick={() => console.log('facebook')}><FaFacebookSquare/></button>\n        <button onClick={props.handleGitHubLogin}><FaGithub/></button>\n        <button onClick={props.handleTwitterLogin}>< FaTwitterSquare/></button>\n        \n\n        <div>\n            <p>OR</p>\n        </div>\n\n        <div>\n          <h1>sign in with email</h1>\n          <EmailPasswordForm\n            onSubmit={props.signInWithEmailAndPassword}\n          />\n        </div>\n\n        <div>\n          <h1>Don't have an account? Sign up</h1>\n          <EmailPasswordForm\n            onSubmit={props.createUserWithEmailAndPassword}  \n          />\n        </div>\n      </Modal>\n        </>\n    )\n}\n\nexport default SignInModal;","import React, { useState, useEffect } from 'react';\nimport firebaseConfig from \"./components/firebaseConfig.jsx\";\nimport firebase from 'firebase/app';\nimport SignInModal from './components/SignInModal';\nimport styled, { css } from 'styled-components'\n\n\nconst firebaseAppAuth = firebase.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n  \n};\n\n\nfirebase.auth().onAuthStateChanged(function(user) {\n    if (user) {\n     console.log('user is signed in')\n    }\n  });\n\n \n\nconst Authentication = (props) => {\n    const [user, setUser] = useState(props.user);\n    const [modalIsOpen, setIsOpen] = useState(false);\n    const [email, setEmail] = useState('hello@hh');\n\n    const openModal = () => {\n        setIsOpen(true);\n        console.log('modalIsOpen')\n    }\n\n    const closeModal = () => {\n        setIsOpen(false);\n    }\n\n    const signOut = () => {\n        firebase\n        .auth()\n        .signOut()\n        .then(function() {\n           console.log('Signout Succesfull')\n           setUser(null);\n     \n        }, function(error) {\n           console.log('Signout Failed')  \n        });\n     }\n\n     const googleSignin = () => {\n        const provider = new firebase.auth.GoogleAuthProvider();\n         firebase\n         .auth()\n         .signInWithPopup(provider)\n         .then(function(result) {\n            const token = result.credential.accessToken;\n            console.log(result.user.email);\n      \n            const newUser = result.user;\n            console.log(token);\n            console.log(newUser);\n            console.log('signed in');\n            setIsOpen(false);\n            setUser(newUser);\n            // setToken(result.user.email)\n         }).catch(function(error) {\n            const errorCode = error.code;\n            const errorMessage = error.message;\n              \n            console.log(error.code)\n            console.log(error.message)\n         });\n      }\n\n    const actionCodeSettings = {\n        // URL you want to redirect back to. The domain (www.example.com) for this\n        // URL must be whitelisted in the Firebase Console.\n        url: 'https://localhost:3000/',\n        // This must be true.\n        handleCodeInApp: true,\n        // iOS: {\n        //   bundleId: 'com.example.ios'\n        // },\n        // android: {\n        //   packageName: 'com.example.android',\n        //   installApp: true,\n        //   minimumVersion: '12'\n        // },\n        dynamicLinkDomain: 'https://localhost:3000/'\n    };\n\n    firebase.auth().sendSignInLinkToEmail(email, actionCodeSettings)\n        .then(function() {\n            // The link was successfully sent. Inform the user.\n            // Save the email locally so you don't need to ask the user for it again\n            // if they open the link on the same device.\n            window.localStorage.setItem('emailForSignIn', email);\n        })\n        .catch(function(error) {\n            // Some error occurred, you can inspect the code: error.code\n    });\n\n    // Confirm the link is a sign-in with email link.\n    if (firebase.auth().isSignInWithEmailLink(window.location.href)) {\n    // Additional state parameters can also be passed via URL.\n    // This can be used to continue the user's intended action before triggering\n    // the sign-in operation.\n    // Get the email if available. This should be available if the user completes\n    // the flow on the same device where they started it.\n    let email = window.localStorage.getItem('emailForSignIn');\n    if (!email) {\n      // User opened the link on a different device. To prevent session fixation\n      // attacks, ask the user to provide the associated email again. For example:\n      email = window.prompt('Please provide your email for confirmation');\n    }\n    // The client SDK will parse the code from the link for you.\n    firebase.auth().signInWithEmailLink(email, window.location.href)\n      .then(function(result) {\n        // Clear email from storage.\n        window.localStorage.removeItem('emailForSignIn');\n        // You can access the new user via result.user\n        // Additional user info profile not available via:\n        // result.additionalUserInfo.profile == null\n        // You can check if the user is new or existing:\n        // result.additionalUserInfo.isNewUser\n      })\n      .catch(function(error) {\n        // Some error occurred, you can inspect the code: error.code\n        // Common errors could be invalid email and invalid or expired OTPs.\n      });\n  }\n\n\n    //Linking/re-authentication with email link\n\n    // Construct the email link credential from the current URL.\n    // let credential = firebase.auth.EmailAuthProvider.credentialWithLink(\n    //     email, window.location.href);\n\n    // // Link the credential to the current user.\n    // firebase.auth().currentUser.linkWithCredential(credential)\n    // .then(function(usercred) {\n    //     // The provider is now successfully linked.\n    //     // The phone user can now sign in with their phone number or email.\n    // })\n    // .catch(function(error) {\n    //     // Some error occurred.\n    // });\n\n\n    const handleGitHubLogin = () => {\n        const provider = new firebase.auth.GithubAuthProvider();\n        firebase\n          .auth()\n          .signInWithPopup(provider)\n          .then(function(result) {\n            // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n            const token = result.credential.accessToken;\n            // The signed-in user info.\n            const newUser = result.user;\n            console.log(result);\n            // console.log('signed in')\n            console.log(newUser)\n            setUser(newUser);\n            setIsOpen(false);\n            // ...\n          })\n          .catch(function(error) {\n            // Handle Errors here.\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            // The email of the user's account used.\n            const email = error.email;\n            // The firebase.auth.AuthCredential type that was used.\n            const credential = error.credential;\n            // ...\n          });\n      }\n\n\n      const handleTwitterLogin = () => {\n        const provider = new firebase.auth.TwitterAuthProvider();\n        firebase\n          .auth()\n          .signInWithPopup(provider)\n          .then(function(result) {\n            // This gives you a Twitter Access Token. You can use it to access the Twitter API.\n            const token = result.credential.accessToken;\n            const secret = result.credential.secret;\n            // The signed-in user info\n            const newUser = result.user;\n            console.log(\"Twitter\", result);\n            // console.log('signed in')\n            // console.log(newUser)\n            // console.log('twitterSignin')\n            // setIsOpen(false);\n            setUser(newUser);\n            setIsOpen(false);\n          })\n          .catch(function(error) {\n            // Handle Errors here.\n            console.log('error', error)\n            const errorCode = error.code;\n            const errorMessage = error.message;\n            // The email of the user's account used.\n            const email = error.email;\n            // The firebase.auth.AuthCredential type that was used.\n            const credential = error.credential;\n            // ...\n          });\n      }\n\n//       const Button = styled.button`\n//         background: transparent;\n//         border-radius: 3px;\n//         border: 2px solid blue;\n//         color: darkblue;\n//         margin: 0 1em;\n//         padding: 0.25em 1em;\n\n//         ${props =>\n//           props.primary &&\n//           css`\n//             background: blue;\n//             color: white;\n//       `};\n// `\n\n      return (\n          <>\n          <p>Authentication</p>\n          {\n            user \n              ? \n              <div>\n                <p>Hello, {user.displayName}</p>\n                <button onClick={signOut}>Sign out</button>\n              </div>\n              : <button onClick={openModal}>Please sign in</button>\n          }\n           <SignInModal\n                modalIsOpen={modalIsOpen}\n                closeModal={closeModal}\n                googleSignin={googleSignin}\n                handleGitHubLogin={handleGitHubLogin}\n                handleTwitterLogin={handleTwitterLogin}\n                signInWithEmailAndPassword={props.signInWithEmailAndPassword}\n                createUserWithEmailAndPassword={props.createUserWithEmailAndPassword}\n            />\n          </>\n      )\n}\n\nexport default Authentication;","import React from 'react';\nimport { StylesProvider } from '@material-ui/styles';\nimport Card from '@material-ui/core/Card';\n\n\nconst CardNew = (props) => {\n    \n    return (\n        <StylesProvider injectFirst>\n            <Card>\n                {/* <p>{props.uniqueId}</p> */}\n                <p>{props.log}</p>\n            </Card>\n        </StylesProvider>\n    )\n}\n\nexport default CardNew;","import React from 'react';\nimport CardNew from './Card'\n\n\n\nconst Cards = (props) => {\n    return (\n        <>\n            {\n                props.items.length\n                ?\n                <ul className=\"here\"> \n                    {props.items.map((item) => {\n                    return (\n                        <li className=\"listResult\" key={item.uniqueId}>\n                            <CardNew\n                                log={item.log}\n                            />\n                        </li>\n                    );\n                    })}\n                </ul>\n                :  <p>Loading...</p>\n            }\n        </>\n    )\n}\n\nexport default Cards;","import React, { Component } from 'react'\nimport reactCSS from 'reactcss'\nimport { SketchPicker } from 'react-color'\n\nclass ColorPicker extends Component {\n  state = {\n    displayColorPicker: false,\n    color: {\n      r: '241',\n      g: '112',\n      b: '19',\n      a: '1',\n    },\n  };\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker })\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false })\n  };\n\n  handleChange = (color) => {\n    this.setState({ color: color.rgb })\n  };\n\n  render() {\n\n    const styles = reactCSS({\n      'default': {\n        color: {\n          width: '36px',\n          height: '14px',\n          borderRadius: '2px',\n          background: `rgba(${ this.state.color.r }, ${ this.state.color.g }, ${ this.state.color.b }, ${ this.state.color.a })`,\n        },\n        swatch: {\n          padding: '5px',\n          background: '#fff',\n          borderRadius: '1px',\n          boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\n          display: 'inline-block',\n          cursor: 'pointer',\n        },\n        popover: {\n          position: 'absolute',\n          zIndex: '2',\n        },\n        cover: {\n          position: 'fixed',\n          top: '0px',\n          right: '0px',\n          bottom: '0px',\n          left: '0px',\n        },\n      },\n    });\n\n    return (\n      <div>\n        <div style={ styles.swatch } onClick={ this.handleClick }>\n          <div style={ styles.color } />\n        </div>\n        { this.state.displayColorPicker ? <div style={ styles.popover }>\n          <div style={ styles.cover } onClick={ this.handleClose }/>\n          <SketchPicker color={ this.state.color } onChange={ this.handleChange } />\n        </div> : null }\n\n      </div>\n    )\n  }\n}\n\nexport default ColorPicker","import React, { useContext, useState, useEffect, lazy, Suspense } from 'react';\nimport './App.css';\nimport NewEntry from './components/Entry.jsx';\nimport firebaseConfig from './components/firebaseConfig.jsx';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport withFirebaseAuth from 'react-with-firebase-auth';\nimport Authentication from './Authentication';\nimport useDebounce from './use-debounce';\nimport Cards from './components/Cards';\nimport ColorPicker from './components/ColorPicker';\nimport Swal from \"sweetalert2\";\n\n\n\nconst firebaseAppAuth = firebase.auth();\n\n// const providers = {\n//   googleProvider: new firebase.auth.GoogleAuthProvider(),\n  \n// };\n\n\nfunction App( {createUserWithEmailAndPassword, signInWithEmailAndPassword} ) {\n  const [items, setItems] = useState([]);\n  const [currentDate, setDate] = useState(new Date());\n  const [selectedDate, setSeletedDate] = useState();\n  const [globalCheckbox, setGlobalCheckbox] = useState(false);\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n  const [isSearching, setIsSearching] = useState(false);\n  const debouncedItems = useDebounce(items, 500);\n\n    // trying context\n  const selectOptions = {\n    all: false,\n    some: false,\n    none: true\n  };\n\n  const [checkboxCounter, setCheckboxCounter] = useState(0);\n  const CheckboxContext = React.createContext(selectOptions.none);\n  const value = useContext(CheckboxContext);\n\n  \n   useEffect(() => {\n    let dbRef;\n    if (!user) {\n      dbRef = firebase.database().ref(`users/Oksana Posobchuk`);\n    } else {\n      dbRef = firebase.database().ref(`users/${user.displayName}`);\n    }\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      \n      console.log('response from database', data);\n      \n      let entryList = [];\n      for (let key in data) {\n        entryList.push({\n          log: data[key],\n          uniqueId: key\n        });\n      }\n      setItems(entryList);\n    })\n  }, [user]);\n\n\n\n  // useEffect(\n  //   () => {\n  //     // Make sure we have a value (user has entered something in input)\n  //     if (debouncedSearchTerm) {\n  //       // Set isSearching state\n  //       setIsSearching(true);\n  //       // Fire off our API call\n  //       searchCharacters(debouncedSearchTerm).then(results => {\n  //         // Set back to false since request finished\n  //         setIsSearching(false);\n  //         // Set results state\n  //         setResults(results);\n  //       });\n  //     } else {\n  //       setResults([]);\n  //     }\n  //   },\n  //   [debouncedSearchTerm]\n  // );\n\n  const handleGlobalChecked = () => {\n    setGlobalCheckbox(!globalCheckbox);\n  }\n\n\n  const addEntry = async (entry) => {\n    if (!user) {\n      Swal.fire({\n        title: 'Oops...',\n        text: 'Please sign in',\n        confirmButtonText: 'Ok',\n      });\n    } else {\n    const dbRef = await firebase.database().ref(`users/${user.displayName}`);\n    dbRef.push(entry);\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n\n      console.log('response from database', data);\n      \n      const entryList = [];\n      for (let key in data) {\n        entryList.push({\n          log: data[key],\n          uniqueId: key\n        });\n      }\n      setItems(entryList);\n    })\n    }\n  };\n\n\n  const handleDateChange = date => {\n    setDate(date);\n    // console.log(selectedDate)\n  }\n\n  const handleDateSelect = date => {\n    setDate(date);\n    // console.log(selectedDate)\n  }\n  // const Entries = React.lazy(() => import('./Entries'));\n  \n\n  return (\n    <div className=\"App\">\n      <>\n      <header>\n        <Authentication\n          user={user}\n          signInWithEmailAndPassword={signInWithEmailAndPassword}\n          createUserWithEmailAndPassword={createUserWithEmailAndPassword}\n        />\n      </header>\n\n      <div className=\"inputSearch\">\n        <h2>Another coding day!</h2>\n        <label className=\"visuallyHidden\">Add another story to your coding journey</label>\n      </div>\n\n        <label htmlFor='globalCheckbox'>Global Checkbox</label>\n        <input\n          name='globalCheckbox'\n          type='checkbox'\n          onChange={handleGlobalChecked}\n          defaultChecked={globalCheckbox}\n        />\n\n        <NewEntry\n          // selectedDate={selectedDate}\n          currentDate={currentDate}\n          handleDateChange={handleDateChange}\n          handleDateSelect={handleDateSelect}\n          item='new entry'\n          isGlobalChecked={globalCheckbox}\n          addEntry={addEntry}\n        />\n\n        <Cards \n          items={items}\n        />\n        <ColorPicker />\n\t\t\t </>\n    </div>\n  );\n}\n\nexport default withFirebaseAuth({\n  // providers,\n  firebaseAppAuth,\n})(App);\n","import React, { useState, useEffect } from 'react';\n\n// Our hook\nexport default function useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      // Set debouncedValue to value (passed in) after the specified delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n\n      // Return a cleanup function that will be called every time ...\n      // ... useEffect is re-called. useEffect will only be re-called ...\n      // ... if value changes (see the inputs array below). \n      // This is how we prevent debouncedValue from changing if value is ...\n      // ... changed within the delay period. Timeout gets cleared and restarted.\n      // To put it in context, if the user is typing within our app's ...\n      // ... search box, we don't want the debouncedValue to update until ...\n      // ... they've stopped typing for more than 500ms.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    // Only re-call effect if value changes\n    // You could also add the \"delay\" var to inputs array if you ...\n    // ... need to be able to change that dynamically.\n    [value] \n  );\n\n  return debouncedValue;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}