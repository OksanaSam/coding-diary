{"version":3,"sources":["components/Entry.jsx","components/firebase.jsx","App.js","serviceWorker.js","index.js"],"names":["Entry","props","useState","isChecked","setChecked","useEffect","isGlobalChecked","console","log","txt","item","type","onChange","defaultChecked","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","items","setItems","Date","currentDate","setDate","globalCheckbox","setGlobalCheckbox","entryList","database","ref","on","snapshot","data","val","key","push","uniqueId","className","placeholder","name","onClick","selected","date","onSelect","length","map","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gLAqDeA,G,MAlDD,SAACC,GAAW,IAAD,EAEWC,qBAFX,mBAEdC,EAFc,KAEHC,EAFG,KAIrBC,qBAAU,WAEFJ,EAAMK,gBACNF,GAAW,GAEXA,GAAW,GASfG,QAAQC,IAAI,wBAAyBP,EAAMK,mBAE5C,CAACL,EAAMK,gBAAiBH,IAE3B,IAMIM,EAQJ,OANIA,EADAN,EACM,UAEA,YAKN,oCACI,2BAAIF,EAAMS,MACV,2BACIC,KAAK,WACLC,SAnBU,WAClBR,GAAYD,IAmBJU,eAAgBV,IAEpB,0CAAgBM,GAChB,4C,uBCnCZK,IAASC,cATM,CACXC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAIIR,QAAf,E,uBCkFeS,MAzFf,WAAgB,IAAD,EACarB,mBAAS,IADtB,mBACNsB,EADM,KACCC,EADD,OAEkBvB,mBAAS,IAAIwB,MAF/B,mBAENC,EAFM,KAEOC,EAFP,OAG+B1B,oBAAS,GAHxC,mBAGN2B,EAHM,KAGUC,EAHV,KA2Cb,OArCAzB,qBAAU,WACR,IAAM0B,EAAY,GAEJjB,EAASkB,WAAWC,MAC5BC,GAAG,SAAS,SAACC,GACjB,IAAMC,EAAOD,EAASE,MAItB,IAAK,IAAIC,KAFT/B,QAAQC,IAAI,yBAA0B4B,GAEtBA,EACdL,EAAUQ,KAAK,CACbC,SAAUF,IAIdb,EAASM,QAEV,IAqBD,yBAAKU,UAAU,OACb,oCACF,yBAAKA,UAAU,eACT,mDACL,2BAAOA,UAAU,kBAAjB,4CACA,2BACC9B,KAAK,OACL+B,YAAY,cACZC,KAAK,cAGN,4BAAQF,UAAU,eAAeG,QAAS,kBA3B3CrC,QAAQC,IAAI,QAASgB,QACrBjB,QAAQC,IAAI,4BAA6BgB,EAAM,GAAGgB,YA0BjD,UACK,kBAAC,IAAD,CACEK,SAAUlB,EACVf,SAzBe,SAAAkC,GAAI,OAAIlB,EAAQkB,IA0B/BC,SAzBe,SAAAD,GAAI,OAAIlB,EAAQkB,OA4BnC,2BACEnC,KAAK,WACLC,SA5BoB,WAC1BkB,GAAmBD,GACnBtB,QAAQC,IAAIqB,IA2BNhB,eAAgBgB,IAEjBL,EAAMwB,OACP,wBAAIP,UAAU,UACXjB,EAAMyB,KAAI,SAACvC,EAAMwC,GAChB,OACE,wBAAIT,UAAU,aAAaH,IAAKY,GAC9B,kBAAC,EAAD,CACEZ,IAAKY,EACLxC,KAAMA,EAAK8B,SACXlC,gBAAiBuB,SAOzB,QC9EUsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,a","file":"static/js/main.c8263417.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nconst Entry = (props) => {\n\n    const [isChecked, setChecked] = useState();\n\n    useEffect(() => {\n            \n        if (props.isGlobalChecked) {\n            setChecked(true);\n        } else {\n            setChecked(false);\n        }\n\n        let txt;\n        if (isChecked) {\n            txt = 'checked'\n        } else {\n            txt = 'unchecked'\n        }\n        console.log('props.isGlobalChecked', props.isGlobalChecked)\n        \n    }, [props.isGlobalChecked, isChecked]);\n\n    const handleChecked = () => {\n        setChecked(!isChecked);\n\n      };\n\n\n    let txt;\n    if (isChecked) {\n        txt = 'checked'\n    } else {\n        txt = 'unchecked'\n    }\n\n\n    return (\n        <>\n            <p>{props.item}</p>\n            <input\n                type='checkbox'\n                onChange={handleChecked}\n                defaultChecked={isChecked}\n            />\n            <p>This box is {txt}</p>\n            <button>Hello</button>\n        </>   \n    );\n};\n\nexport default Entry;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst config = {\n    apiKey: \"AIzaSyAUgQEbOBcqZdf_L0Sgm9DQyINiHuEqIVE\",\n    authDomain: \"coding-diary-d8ded.firebaseapp.com\",\n    databaseURL: \"https://coding-diary-d8ded.firebaseio.com\",\n    projectId: \"coding-diary-d8ded\",\n    storageBucket: \"coding-diary-d8ded.appspot.com\",\n    messagingSenderId: \"309101571735\",\n    appId: \"1:309101571735:web:1d74e9b8c9dd4e4e4f43d2\"\n  };\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Entry from './components/Entry.jsx';\nimport firebase from \"./components/firebase.jsx\";\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [currentDate, setDate] = useState(new Date());\n  const [globalCheckbox, setGlobalCheckbox] = useState(false);\n\n  \n  useEffect(() => {\n    const entryList = [];\n\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n\n      console.log('response from database', data);\n\n      for (let key in data) {\n        entryList.push({\n          uniqueId: key,\n        });\n      }\n\n      setItems(entryList);\n    })\n  }, []);\n\n \n \n  const add = () => {\n    console.log('items', items);\n    console.log('accessing specific values', items[0].uniqueId);\n  };\n\n\n  const handleDateChange = date => setDate(date);\n  const handleDateSelect = date => setDate(date);\n\n  const handleGlobalChecked = () => {\n    setGlobalCheckbox(!globalCheckbox);\n    console.log(globalCheckbox)\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <>\n\t\t\t\t<div className=\"inputSearch\">\n          <h2>Another coding day!</h2>\n\t\t\t\t\t<label className=\"visuallyHidden\">Add another story to your coding journey</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Pick a date\"\n\t\t\t\t\t\tname=\"userInput\"\n\t\t\t\t\t/>\n          \n\t\t\t\t\t<button className=\"searchButton\" onClick={() => add()}>Search</button>\n          <DatePicker\n            selected={currentDate}\n            onChange={handleDateChange}\n            onSelect={handleDateSelect}\n          />\n\t\t\t\t</div>\n        <input\n          type='checkbox'\n          onChange={handleGlobalChecked}\n          defaultChecked={globalCheckbox}\n        />\n        {items.length ?\n        <ul className=\"search\"> \n          {items.map((item, index) => {\n            return (\n              <li className=\"listResult\" key={index}>\n                <Entry\n                  key={index}\n                  item={item.uniqueId}\n                  isGlobalChecked={globalCheckbox}\n\n                />\n              </li>\n            );\n          })}\n        </ul>\n        : null}\n\t\t\t\t\n\t\t\t</>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}