{"version":3,"sources":["components/firebaseConfig.jsx","components/Entry.jsx","components/EmailPasswordForm.jsx","App.js","serviceWorker.js","index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebase","apps","length","initializeApp","initializeFirebase","Entry","props","useState","isChecked","setChecked","textArea","setTextArea","useEffect","isGlobalChecked","console","log","txt","addToDataBase","entry","index","database","ref","user","displayName","push","item","type","onChange","defaultChecked","onSubmit","e","preventDefault","addEntry","name","id","cols","rows","placeholder","target","value","SubmitButton","EmailPasswordForm","email","setEmail","password","setPassword","required","onClick","firebaseAppAuth","providers","googleProvider","GoogleAuthProvider","withFirebaseAuth","signOut","signInWithGoogle","signInWithGithub","createUserWithEmailAndPassword","signInWithEmailAndPassword","items","setItems","Date","currentDate","setDate","globalCheckbox","setUser","setToken","onAuthStateChanged","modalIsOpen","setIsOpen","closeModal","CheckboxContext","React","createContext","useContext","on","snapshot","data","val","entryList","key","uniqueId","a","dbRef","className","map","then","error","isOpen","ariaHideApp","onAfterOpen","onRequestClose","contentLabel","provider","signInWithPopup","result","token","credential","accessToken","newUser","catch","code","message","GithubAuthProvider","selected","date","onSelect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67985de4.chunk.js","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/database';\n\n// Initialize Firebase\nconst firebaseConfig = {\n    apiKey: \"AIzaSyAUgQEbOBcqZdf_L0Sgm9DQyINiHuEqIVE\",\n    authDomain: \"coding-diary-d8ded.firebaseapp.com\",\n    databaseURL: \"https://coding-diary-d8ded.firebaseio.com\",\n    projectId: \"coding-diary-d8ded\",\n    storageBucket: \"coding-diary-d8ded.appspot.com\",\n    messagingSenderId: \"309101571735\",\n    appId: \"1:309101571735:web:1d74e9b8c9dd4e4e4f43d2\"\n  };\n\n  function initializeFirebase() {\n    // Prevent reinitializing the app in snack.\n    if (!firebase.apps.length) {\n      return firebase.initializeApp(firebaseConfig);\n    }\n  }\n  initializeFirebase();\n// firebase.initializeApp(firebaseConfig);\n\nexport default firebaseConfig;\n","import React, { useState, useEffect } from 'react';\nimport firebaseConfig from \"./firebaseConfig.jsx\";\nimport firebase from 'firebase/app';\n\n\nconst Entry = (props) => {\n\n    const [isChecked, setChecked] = useState();\n    const [textArea, setTextArea] = useState('');\n\n    useEffect(() => {\n            \n        if (props.isGlobalChecked) {\n            setChecked(true);\n        } else {\n            setChecked(false);\n        }\n\n        let txt;\n        if (isChecked) {\n            txt = 'checked'\n        } else {\n            txt = 'unchecked'\n        }\n        console.log('props.isGlobalChecked', props.isGlobalChecked)\n        \n    }, [props.isGlobalChecked, isChecked]);\n\n    const handleChecked = () => {\n        setChecked(!isChecked);\n\n      };\n\n      const handleTextAreaChange = (e) => {\n        setTextArea(e.target.value);\n        console.log(textArea)\n      }\n\n      const handleSubmit = (e) => {\n        e.preventDefault();\n        if (!textArea) return;\n        addToDataBase(textArea);\n        props.addEntry(textArea);\n        console.log(textArea)\n      }\n\n      const handleKeyPress = (e) => {\n        e.preventDefault();\n        if (e.key === \"Enter\") {\n            // if (!textArea) return;\n            addToDataBase(textArea);\n        } else {\n            alert('No entry')\n        }\n    };\n\n\n  const addToDataBase = (entry, index) => {\n    const dbRef = firebase.database().ref(`users/${props.user.displayName}`);\n    dbRef.push(entry);\n\n  };\n\n\n\n    let txt;\n    if (isChecked) {\n        txt = 'checked'\n    } else {\n        txt = 'unchecked'\n    }\n\n\n    return (\n        <>\n            <p>{props.item}</p>\n            <input\n                type='checkbox'\n                onChange={handleChecked}\n                defaultChecked={isChecked}\n            />\n            <p>This box is {txt}</p>\n            \n            <form \n                onSubmit={handleSubmit}\n            >\n                <textarea\n                    name=\"\" id=\"\" cols=\"30\" rows=\"10\" placeholder=\"message\"\n                    onChange={handleTextAreaChange}\n                    // onClick={props.addEntry()}\n                    // onKeyPress={handleKeyPress}\n\n                ></textarea>\n                <button type='submit'>Submit</button>\n      \n     \n            {/* <input\n                type='text'\n                // onChange={this.myChangeHandler}\n            /> */}\n            </form>\n        </>   \n    );\n};\n\nexport default Entry;\n","import React, { useState } from 'react';\n\nconst SubmitButton = props =>\n<button {...props}>submit</button>;\n\nconst EmailPasswordForm = ( {onSubmit} ) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  return (\n    <>\n    <input\n      type=\"email\"\n      value={email}\n      required\n      onChange={(e) => setEmail(e.target.value)}\n\n    />\n    <input\n      type=\"password\"\n      value={password}\n      required\n      placeholder='enter password'\n      onChange={(e) => setPassword(e.target.value)}\n    />\n      \n      <SubmitButton onClick={() => onSubmit(email, password)} />\n    </>\n  );\n}\n\nexport default EmailPasswordForm;","import React, { useContext, useState, useEffect } from 'react';\nimport './App.css';\nimport Entry from './components/Entry.jsx';\nimport EmailPasswordForm from './components/EmailPasswordForm.jsx';\nimport firebaseConfig from './components/firebaseConfig.jsx';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport * as firebase from 'firebase/app';\nimport 'firebase/auth';\nimport withFirebaseAuth from 'react-with-firebase-auth';\nimport Modal from 'react-modal';\n\n\n\nconst firebaseAppAuth = firebase.auth();\n\nconst providers = {\n  googleProvider: new firebase.auth.GoogleAuthProvider(),\n  \n};\n\n\nfunction App( {signOut, signInWithGoogle, signInWithGithub, createUserWithEmailAndPassword, signInWithEmailAndPassword} ) {\n  const [items, setItems] = useState([]);\n  const [currentDate, setDate] = useState(new Date());\n  const [globalCheckbox, setGlobalCheckbox] = useState(false);\n  const [user, setUser] = useState();\n  const [token, setToken] = useState();\n\n\n\n  firebase.auth().onAuthStateChanged(function(user) {\n    if (user) {\n     console.log('user is signed in')\n    }\n  });\n\n  // trying context\nconst selectOptions = {\n  all: false,\n  some: false,\n  none: true\n};\n\n\nconst [modalIsOpen, setIsOpen] = useState(false);\nfunction openModal() {\n  setIsOpen(true);\n}\n\nfunction afterOpenModal() {\n  // console.log('modal is open');\n}\n\nfunction closeModal(){\n  setIsOpen(false);\n}\n\n\n\n\nconst handleGitHubLogin = () => {\n  const provider = new firebase.auth.GithubAuthProvider();\n  firebase\n    .auth()\n    .signInWithPopup(provider)\n    .then(function(result) {\n      // This gives you a Facebook Access Token. You can use it to access the Facebook API.\n      const token = result.credential.accessToken;\n      // The signed-in user info.\n      const newUser = result.user;\n      console.log(result);\n      // console.log('signed in')\n      console.log(newUser)\n      setIsOpen(false);\n      setUser(newUser);\n      // ...\n    })\n    .catch(function(error) {\n      // Handle Errors here.\n      const errorCode = error.code;\n      const errorMessage = error.message;\n      // The email of the user's account used.\n      const email = error.email;\n      // The firebase.auth.AuthCredential type that was used.\n      const credential = error.credential;\n      // ...\n    });\n}\n\n\n\nconst googleSignin = () => {\n  const provider = new firebase.auth.GoogleAuthProvider();\n   firebase\n   .auth()\n   .signInWithPopup(provider)\n   .then(function(result) {\n      const token = result.credential.accessToken;\n      console.log(result.user.email);\n\n      const newUser = result.user;\n      console.log(token);\n      console.log(newUser);\n      console.log('signed in');\n      setIsOpen(false);\n      setUser(newUser);\n      setToken(result.user.email)\n   }).catch(function(error) {\n      const errorCode = error.code;\n      const errorMessage = error.message;\n\t\t\n      console.log(error.code)\n      console.log(error.message)\n   });\n}\n\nconst googleSignout = () => {\n   firebase\n   .auth()\n   .signOut()\n   .then(function() {\n      console.log('Signout Succesfull')\n      setUser(null);\n\n   }, function(error) {\n      console.log('Signout Failed')  \n   });\n}\n\n  \n  const CheckboxContext = React.createContext(selectOptions.none);\n  const value = useContext(CheckboxContext);\n  // console.log('value', value);\n  \n  useEffect(() => {\n    if (!user) return;\n\n    const dbRef = firebase.database().ref(`users/${user.displayName}`);\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n      \n      console.log('response from database', data);\n      \n      let entryList = [];\n      for (let key in data) {\n        entryList.push({\n          log: data[key],\n          uniqueId: key\n        });\n      }\n      setItems(entryList);\n    })\n    \n    // console.log('state', items);\n    // console.log('updated state', items[0].log);\n\n\n  \n    // console.log('response from database', newData)\n  \n  }, [user]);\n\n\n  const addEntry = async (entry) => {\n    \n    const dbRef = await firebase.database().ref(`users/${user.displayName}`);\n    dbRef.push(entry);\n    dbRef.on('value', (snapshot) => {\n      const data = snapshot.val();\n\n      console.log('response from database', data);\n      // newData = data;\n      \n      const entryList = [];\n      for (let key in data) {\n        entryList.push({\n          log: data[key],\n          uniqueId: key\n        });\n      }\n      setItems(entryList);\n    })\n    \n    // console.log('updated state');\n    // console.log('state 2', items);\n    \n  };\n\n\n\n  console.log('state outside', items);\n\n\n\n  const handleDateChange = date => setDate(date);\n  const handleDateSelect = date => setDate(date);\n\n  const handleGlobalChecked = () => {\n    setGlobalCheckbox(!globalCheckbox);\n    console.log(globalCheckbox)\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <>\n      <header>\n        <div>\n          {\n            items.length && user\n              ?\n              <ul className=\"here\"> \n                {items.map((item, index) => {\n                  console.log('info to display', item)\n                  return (\n                    <li className=\"listResult\" key={index}>\n                      <p>{item.uniqueId}</p>\n                      <p>{item.log}</p>\n                    </li>\n                  );\n                })}\n              </ul>\n              :  <p>No Data</p>\n          }\n        </div>\n     \n        {\n          user \n            ? \n            <div>\n              <p>Hello, {user.displayName}</p>\n              <button onClick={googleSignout}>Sign out</button>\n            </div>\n            : <button onClick={openModal}>Please sign in</button>\n        }\n      </header>\n       \n      <Modal\n        isOpen={modalIsOpen}\n        ariaHideApp={false}\n        onAfterOpen={afterOpenModal}\n        onRequestClose={closeModal}\n        contentLabel=\"Example Modal\"\n      >\n        <button onClick={closeModal}>close</button>\n\n        <div>\n          {/* <h1>sign in with google</h1> */}\n          <button onClick={googleSignin}>sign in with google</button>\n       </div>\n\n       <div><p>OR</p></div>\n\n        <div>\n          {/* <h1>sign in with github</h1> */}\n          <button onClick={handleGitHubLogin}>sign in with github</button>\n        </div>\n\n        <div><p>OR</p></div>\n\n        <div>\n          <h1>sign in with email</h1>\n          <EmailPasswordForm\n            onSubmit={signInWithEmailAndPassword}\n          />\n        </div>\n\n        <div>\n          <h1>Don't have an account? Sign up</h1>\n          <EmailPasswordForm\n            onSubmit={createUserWithEmailAndPassword}\n           \n          />\n        </div>\n           \n         \n        \n      </Modal>\n     \n\n       \n\n\t\t\t\t<div className=\"inputSearch\">\n          <h2>Another coding day!</h2>\n\t\t\t\t\t<label className=\"visuallyHidden\">Add another story to your coding journey</label>\n          <DatePicker\n            selected={currentDate}\n            onChange={handleDateChange}\n            onSelect={handleDateSelect}\n          />\n\t\t\t\t</div>\n\n        {\n          !user\n          ?\n          null \n          :\n          <Entry\n            item='new entry'\n            isGlobalChecked={globalCheckbox}\n            addEntry={addEntry}\n          />\n        }\n        \n\n        {/* <CheckboxContext.Provider value={selectOptions.none}>\n        <input\n          type='checkbox'\n          onChange={handleGlobalChecked}\n          defaultChecked={globalCheckbox}\n        />\n  \n      </CheckboxContext.Provider> */}\n        {\n          items.length && user\n          ?\n          <ul className=\"search\"> \n            {items.map((item, index) => {\n              return (\n                <li className=\"listResult\" key={index}>\n                  <Entry\n                    key={index}\n                    item={item.uniqueId}\n                    isGlobalChecked={globalCheckbox}\n                    user={user}\n\n                  />\n                </li>\n              );\n            })}\n          </ul>\n          : null}\n\t\t\t\t\n\n\t\t\t</>\n    </div>\n  );\n}\n\n// export default App;\n\nexport default withFirebaseAuth({\n  providers,\n  firebaseAppAuth,\n})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}